//============================================================================
// Name        : ZLMPI.cpp
// Author      : ZL
// Version     :
// Copyright   : ZL-CSPIC
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <mpi.h>
#include <omp.h>
#include <time.h>
using namespace std;

int main(int argc, char**argv){

	double t0=omp_get_wtime();

	MPI_Init(&argc, &argv);

	int this_rank;
	int total_process;
	MPI_Comm_rank(MPI_COMM_WORLD,&this_rank);
	MPI_Comm_size(MPI_COMM_WORLD,&total_process);


	cout <<"This is thread No."<<this_rank<<" of"<<total_process<<" process"<< endl;
	//send
	if(this_rank==0){
		int send_to=(this_rank==total_process-1?0:this_rank+1);
		MPI_Send(&this_rank,1,MPI_INT,send_to,0,MPI_COMM_WORLD);
	}
	//receive
	int receive_msg;
	MPI_Status recv_state;
	int listen_from=(this_rank==0?total_process-1:this_rank-1);
	MPI_Recv(&receive_msg,1,MPI_INT,listen_from,0,MPI_COMM_WORLD,&recv_state);

	cout<<"Process "<<this_rank<<" receive handshake from process "<<receive_msg<<endl;

	if(this_rank!=0){
		int send_to=(this_rank==total_process-1?0:this_rank+1);
		MPI_Send(&this_rank,1,MPI_INT,send_to,0,MPI_COMM_WORLD);
	}


	double a=2;

	omp_set_num_threads(2);

#pragma omp parallel for
	for (int i = 0; i < 500000000; ++i) {
		a*=2;
		a/=2;
	}


	cout<<"Process "<<this_rank<<" Total Time:"<<(omp_get_wtime()-t0)*1000<<endl;


	MPI_Finalize();

	return 0;


}
