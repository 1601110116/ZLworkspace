
#include "LowBDetectorConstruction.hh"

#include "G4RunManager.hh"
#include "G4NistManager.hh"
#include "G4Box.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4SystemOfUnits.hh"


LowBDetectorConstruction::LowBDetectorConstruction()
: G4VUserDetectorConstruction(),
  fScoringVolume(0)
{ }


LowBDetectorConstruction::~LowBDetectorConstruction()
{ }


G4VPhysicalVolume* LowBDetectorConstruction::Construct()
{  

	G4NistManager* nist=G4NistManager::Instance();

	G4double worldHeight=1.0*m;
	G4double worldWidth=1.0*m;
	G4double worldLength=1.0*m;

	G4double DectectorWidth=1.0*mm;
	G4double DectectorHeight=10.0*cm;
	G4double DectectorLength=10.0*cm;

	G4double sourceWidth=1.0*mm;
	G4double sourceHeight=5.0*cm;
	G4double sourceLength=5.0*cm;

	//Shapes
	G4Box* myWorld=new G4Box("world",worldWidth,worldLength,worldHeight);
	G4Box* myLowBDetector=new G4Box("scintillator",sourceWidth,sourceLength,sourceHeight);
	G4Box* mySource=new G4Box("source",)

	//Materials

	G4Material* Air=nist->FindOrBuildMaterial("G4_AIR");
	G4Material* Plastic=nist->FindOrBuildMaterial("G4_PLASTIC_SC_VINYLTOLUENE");

	//Logic
	G4LogicalVolume* myWorld_Logic=new G4LogicalVolume(myWorld,Air,"world");
	G4LogicalVolume* myLowBDetector_Logic=new G4LogicalVolume(myLowBDetector,Plastic,"plastic");

	//Placement

	G4VPhysicalVolume* myWorld_Physics=new G4PVPlacement(0,G4ThreeVector(0.,0.,0.),myWorld_Logic,"world",0,false,0);
	G4VPhysicalVolume* myLowBDetector_Physics=new G4PVPlacement(0,G4ThreeVector(0.,0.,0.),myLowBDetector_Logic,"plastic",myWorld_Logic,false,0);


	// Set Shape2 as scoring volume
	//
	fScoringVolume = myLowBDetector_Logic;

	//
	//always return the physical World
	//
	return myWorld_Physics;
}

