//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: B1SteppingAction.cc 74483 2013-10-09 13:37:06Z gcosmo $
//
/// \file B1SteppingAction.cc
/// \brief Implementation of the B1SteppingAction class

#include "B1SteppingAction.hh"
#include "B1EventAction.hh"
#include "B1DetectorConstruction.hh"

#include "G4Step.hh"
#include "G4Event.hh"
#include "G4RunManager.hh"
#include "G4LogicalVolume.hh"

#include "G4SystemOfUnits.hh"
#include "G4UnitsTable.hh"


B1SteppingAction::B1SteppingAction(B1EventAction* eventAction) :
G4UserSteppingAction(), fEventAction(eventAction), fScoringVolume(0) {
}


B1SteppingAction::~B1SteppingAction() {
}


void B1SteppingAction::UserSteppingAction(const G4Step* step) {
	if (!fScoringVolume) {
		const B1DetectorConstruction* detectorConstruction =
				static_cast<const B1DetectorConstruction*>(G4RunManager::GetRunManager()->GetUserDetectorConstruction());
		fScoringVolume = detectorConstruction->GetScoringVolume();
	}

	// get volume of the current step
	G4LogicalVolume* volume = step->GetPreStepPoint()->GetTouchableHandle()->GetVolume()->GetLogicalVolume();

	// check if we are in scoring volume


	// collect energy deposited in this step
	G4cout<<"Catch Step : "<<G4endl;
	G4cout<<"----From position : ("
			<<step->GetPreStepPoint()->GetPosition().getX()<<","
			<<step->GetPreStepPoint()->GetPosition().getY()<<","
			<<step->GetPreStepPoint()->GetPosition().getZ()<<")"
			<<" To position : ("
			<<step->GetPostStepPoint()->GetPosition().getX()<<","
			<<step->GetPostStepPoint()->GetPosition().getY()<<","
			<<step->GetPostStepPoint()->GetPosition().getZ()<<")"
			<<G4endl;
	G4cout<<"----Delta position : ("
			<<step->GetDeltaPosition().getX()<<","
			<<step->GetDeltaPosition().getY()<<","
			<<step->GetDeltaPosition().getZ()<<")"
			<<" Step Length : "<<G4BestUnit(step->GetStepLength(),"Length")
			<<G4endl;
	G4cout<<"----Energy : "
			<<step->GetPreStepPoint()->GetTotalEnergy()<<"MeV  --> "
			<<step->GetPostStepPoint()->GetTotalEnergy()<<"Mev"
			<<" Energy Deposit:"<<G4BestUnit(step->GetTotalEnergyDeposit(),"Energy")
			<<" Non-Ion : "<<G4BestUnit(step->GetNonIonizingEnergyDeposit(),"Energy")
			<<G4endl;
	G4cout<<"----Charge : "
			<<step->GetPreStepPoint()->GetCharge()<<"e To "
			<<step->GetPostStepPoint()->GetCharge()<<"e"
			<<G4endl;
	G4cout<<"----Delta Time : "<<G4BestUnit(step->GetDeltaTime(),"Time")<<G4endl;

	if (volume != fScoringVolume){
		G4cout<<"----Out of Scoring Volume"<<G4endl;
		return;
	}else{
		G4cout<<"----In Scoring Volume"<<G4endl;
	}


	G4double edepStep = step->GetTotalEnergyDeposit();

	fEventAction->AddEdep(edepStep);
}

