//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: B1PrimaryGeneratorAction.cc 69565 2013-05-08 12:35:31Z gcosmo $
//
/// \file B1PrimaryGeneratorAction.cc
/// \brief Implementation of the B1PrimaryGeneratorAction class

#include "LowBPrimaryGeneratorAction.hh"

#include "G4LogicalVolumeStore.hh"
#include "G4LogicalVolume.hh"
#include "G4Box.hh"
#include "G4RunManager.hh"
#include "G4ParticleGun.hh"
#include "G4ParticleTable.hh"
#include "G4ParticleDefinition.hh"

#include "G4Electron.hh"
#include "G4Gamma.hh"

#include "G4SystemOfUnits.hh"
#include "Randomize.hh"

LowBPrimaryGeneratorAction::LowBPrimaryGeneratorAction(const G4String& particleName, G4double energy, G4ThreeVector position, G4ThreeVector momentumDirection) :
		G4VUserPrimaryGeneratorAction(), fParticleGun(0) {
	G4int nofParticles = 1;
	fParticleGun = new G4ParticleGun(nofParticles);

	// default particle kinematic
	G4ParticleTable* particleTable = G4ParticleTable::GetParticleTable();
	G4ParticleDefinition* particle = particleTable->FindParticle(particleName);
	fParticleGun->SetParticleDefinition(particle);
	fParticleGun->SetParticleEnergy(energy);
	fParticleGun->SetParticlePosition(position);
	fParticleGun->SetParticleMomentumDirection(momentumDirection);
}

LowBPrimaryGeneratorAction::~LowBPrimaryGeneratorAction() {
	delete fParticleGun;
}

void LowBPrimaryGeneratorAction::GeneratePrimaries(G4Event* anEvent) {
	//this function is called at the begining of ecah event
	//

	// In order to avoid dependence of PrimaryGeneratorAction
	// on DetectorConstruction class we get Envelope volume
	// from G4LogicalVolumeStore.

	G4double sourceYZ = 0.;
	G4double sourceX = 0.;

	if (!fEnvelopeBox) {
		G4LogicalVolume* sourceVolume = G4LogicalVolumeStore::GetInstance()->GetVolume("source");

		if (sourceVolume)
			fEnvelopeBox = dynamic_cast<G4Box*>(sourceVolume->GetSolid());
	}

	if (fEnvelopeBox) {
		sourceYZ = fEnvelopeBox->GetYHalfLength() * 2.;
		sourceX = -1.0 * cm + fEnvelopeBox->GetXHalfLength();
	} else {
		G4ExceptionDescription msg;
		msg << "Envelope volume of box shape not found.\n";
		msg << "Perhaps you have changed geometry.\n";
		msg << "The gun will be place at the center.";
		G4Exception("B1PrimaryGeneratorAction::GeneratePrimaries()", "MyCode0002", JustWarning, msg);
	}

	G4double size = 1.0;
	G4double y0 = size * sourceYZ * (G4UniformRand()-0.5);
	G4double z0 = size * sourceYZ * (G4UniformRand()-0.5);
	G4double x0 = sourceX;

	fParticleGun->SetParticlePosition(G4ThreeVector(x0, y0, z0));

	fParticleGun->GeneratePrimaryVertex(anEvent);
}

