//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: B1RunAction.cc 89630 2015-04-23 12:11:28Z gcosmo $
//
/// \file B1RunAction.cc
/// \brief Implementation of the B1RunAction class

#include "B1RunAction.hh"
#include "B1PrimaryGeneratorAction.hh"
#include "B1DetectorConstruction.hh"
#include "B1Run.hh"

#include "G4RunManager.hh"
#include "G4LogicalVolumeStore.hh"
#include "G4LogicalVolume.hh"
#include "G4UnitsTable.hh"
#include "G4SystemOfUnits.hh"


B1RunAction::B1RunAction() :G4UserRunAction() {
}


B1RunAction::~B1RunAction() {
}


G4Run* B1RunAction::GenerateRun() {
	return new B1Run;
}


void B1RunAction::BeginOfRunAction(const G4Run*) {
	//inform the runManager to save random number seed
	G4RunManager::GetRunManager()->SetRandomNumberStore(false);
}


void B1RunAction::EndOfRunAction(const G4Run* run) {
	G4int nofEvents = run->GetNumberOfEvent();
	if (nofEvents == 0)
		return;

	const B1Run* b1Run = static_cast<const B1Run*>(run);


	//this is total energy in a run
	G4double edep = b1Run->GetEdep();

	G4double edep2 = b1Run->GetEdep2();
	G4double rms = edep2 - edep * edep / nofEvents;
	if (rms > 0.)
		rms = std::sqrt(rms);
	else
		rms = 0.;

	//get mass
	const B1DetectorConstruction* detectorConstruction =
			static_cast<const B1DetectorConstruction*>(G4RunManager::GetRunManager()->GetUserDetectorConstruction());
	G4double mass = detectorConstruction->GetScoringVolume()->GetMass();

	// Run conditions
	//  note: There is no primary generator action object for "master"
	//        run manager for multi-threaded mode.
	const B1PrimaryGeneratorAction* generatorAction =
			static_cast<const B1PrimaryGeneratorAction*>(G4RunManager::GetRunManager()->GetUserPrimaryGeneratorAction());
	G4String runCondition;
	if (generatorAction) {
		const G4ParticleGun* particleGun = generatorAction->GetParticleGun();
		runCondition += particleGun->GetParticleDefinition()->GetParticleName();
		runCondition += " of ";
		G4double particleEnergy = particleGun->GetParticleEnergy();
		runCondition += G4BestUnit(particleEnergy, "Energy");
	}

	// Print
	//
	if (IsMaster()) {
		G4cout << G4endl<< "--------------------End of Global Run-----------------------";
	}
	else {
		G4cout
		<< G4endl
		<< "--------------------End of Local Run------------------------";
	}

	G4cout << G4endl<< " The run consists of " << nofEvents << " "<< runCondition
	<< G4endl
	<< " Total Energy Deposit : "<< b1Run->GetEdep()<<"MeV"<< " rms = " << rms<<"MeV"
	<< G4endl
	<< "Detector Mass : "<<mass/g<<"g"
	<< G4endl
	<< "------------------------------------------------------------"
	<< G4endl
	<< G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
